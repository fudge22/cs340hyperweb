package node;

//Unstable Inverse Surrogate Fold
//this naming convention beacuse the node would have a fold and an inverse surrogate fold
public class UnstableISF extends FoldState {

	UnstableISF() {
		
	}
	
	/*
	 * In this function, we assume that the node being updated has had a child added and that the 
	 * 	node has both a fold and an inverse surrogate fold
	 */
	public void UpdateFold(Node node) {
		/*
		 * make the fold of the child the inverse surrogate fold of node
		 * child.setFoldID(node.getInverseSurrogateFold())
		 * 
		 * tell node's inverse surrogate fold that it has a new fold
		 * node.getInverseSurrogateFold().setFoldID(child);
		 * 
		 * tell node's inverse surrogate fold to remove its surrogate fold
		 * node.getInverseSurrogateFold().setSurroagetFold(null);
		 * 
		 * tell node's inverse surrogate fold to update its foldState
		 * node.getInverseSurrogateFold().setFoldState(new StableFold()) 
		 * 
		 * make node forget it's inverse surrogate fold
		 * node.setInverseSurrogateFold(null)
		 * 
		 * update node's state to stable
		 * node.setFoldState(new StableFold());
		 */
	}
}
